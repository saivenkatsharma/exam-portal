generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  exams     Exam[]   // For teachers who create exams
  attempts  Attempt[] // For students who take exams
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  duration    Int      // in minutes
  startTime   DateTime
  endTime     DateTime
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  questions   Question[]
  attempts    Attempt[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  options       String[]
  correctOption Int
  exam          Exam     @relation(fields: [examId], references: [id])
  examId        String   @db.ObjectId
  fileType      FileType? // PDF or Image
  fileUrl       String?   // URL to the stored file
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Attempt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  exam      Exam     @relation(fields: [examId], references: [id])
  examId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  answers   Json     // Array of selected options
  score     Int
  startTime DateTime @default(now())
  endTime   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum FileType {
  PDF
  IMAGE
} 